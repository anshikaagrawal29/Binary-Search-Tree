using System;
using System.Collections.Generic;

public class Tree
{
	public Node root;
	public int[] result;
	
	//Create a tree node with left and right as null
	public class Node
	{
		public int data;
		public Node left;
		public Node right;
		public Node(int d)
		{
			data = d;
			left =  right = null;
		}
	}
	
	public Node insert(int d, Node root)
	{
		if(root == null)
		{
			root = new Node(d);
			return root;
		}
		
		if(d <= root.data)
			root.left = insert(d, root.left);
		else
			root.right = insert(d, root.right);
		
		return root;
	}

	//Printing Tree
	public void print()
	{
		if(root == null)
			return;

		Queue<Node> q = new Queue<Node>();
		q.Enqueue(root);
		int index = 0;
		Node curr;
		while(q.Count > 0)
		{
			curr = q.Dequeue();
			result[index] = curr.data;
			index++;
			
			if(curr.left != null)
				q.Enqueue(curr.left);
			
			if(curr.right != null)
				q.Enqueue(curr.right);
		}
	}
	public static void Main()
	{
		Tree g = new Tree();
		int[] arr = {11, 6, 13, 5, 12, 10};
		int n = arr.Length;
		g.result = new int[n];
		for(int i=0 ; i< n;i ++)
		{
			g.root = g.insert(arr[i], g.root);
		}
		
		g.print();
        int m = 0;
		int count = 0;
		while(m <n)
		{
			if(arr[m] == g.result[m])
			{
				Console.Write(arr[m] + " ");
				count++;
			}
			m++;
		}
		Console.WriteLine();
		if(count == n)
			Console.WriteLine("It represents Level order traversal");
		else
			Console.WriteLine("It does not represents Level order traversal");
		
	}
}
